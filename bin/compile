#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

get_os() {
  uname | tr '[:upper:]' '[:lower:]'
}

JQ="$BP_DIR/vendor/jq-$(get_os)"

### from https://github.com/heroku/heroku-buildpack-nodejs/blob/master/lib/json.sh#L5
read_json() {
  local file="$1"
  local key="$2"

  if test -f "$file"; then
    # -c = print on only one line
    # -M = strip any color
    # --raw-output = if the filterâ€™s result is a string then it will be written directly 
    #                to stdout rather than being formatted as a JSON string with quotes
    # shellcheck disable=SC2002
    cat "$file" | $JQ -c -M --raw-output "$key // \"\"" || return 1
  else
    echo ""
  fi
}

### from https://github.com/heroku/heroku-buildpack-nodejs/blob/master/lib/cache.sh#L34
get_cache_directories() {
  local build_dir="$1"
  local dirs1 dirs2
  dirs1=$(read_json "$build_dir/package.json" ".cacheDirectories | .[]?")
  dirs2=$(read_json "$build_dir/package.json" ".cache_directories | .[]?")

  if [ -n "$dirs1" ]; then
    echo "$dirs1"
  else
    echo "$dirs2"
  fi
}

### from https://github.com/heroku/heroku-buildpack-nodejs/blob/master/lib/cache.sh#L77
restore_custom_cache_directories() {
  local cache_directories
  local build_dir=${1:-}
  local cache_dir=${2:-}
  # Parse the input string with multiple lines: "a\nb\nc" into an array
  mapfile -t cache_directories <<< "$3"

  echo "Loading ${#cache_directories[@]} from cacheDirectories (package.json):"

  for cachepath in "${cache_directories[@]}"; do
    if [ -e "$build_dir/$cachepath" ]; then
      echo "- $cachepath (exists - skipping)"
    else
      if [ -e "$cache_dir/node/cache/$cachepath" ]; then
        echo "- $cachepath"
        mkdir -p "$(dirname "$build_dir/$cachepath")"
        mv "$cache_dir/node/cache/$cachepath" "$build_dir/$cachepath"
      else
        echo "- $cachepath (not cached - skipping)"
      fi
    fi
  done
}

cache_directories="$(get_cache_directories "$BUILD_DIR")"
restore_custom_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$cache_directories"

yarn workspace `cat $ENV_DIR/YARN_WORKSPACE` run `cat $ENV_DIR/YARN_RUN_COMMAND`
